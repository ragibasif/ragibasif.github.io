---
import { getCollection } from "astro:content";
import Base from "@/layouts/Base.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import { SITE } from "@/consts/consts";
import Link from "@/components/Link.astro";

const posts = await getCollection("blog");
const sortedPosts = posts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Get all unique tags
const allTags = [
  ...new Set(posts.flatMap((post) => post.data.tags ?? [])),
].sort();
---

<Base title={SITE.NAME} description={SITE.DESCRIPTION}>
  <h1>Blog</h1>
  <section>
    {
      allTags.length > 0 && (
        <div class="tags-filter">
          <div class="tags-list">
            <button class="tag-button active" data-tag="all">
              All
            </button>
            {allTags.map((tag) => (
              <button class="tag-button" data-tag={tag}>
                {tag}
              </button>
            ))}
          </div>
        </div>
      )
    }
  </section>
  <section>
    <div class="posts-grid" id="posts-grid">
      {
        sortedPosts.map((post) => (
          <div class="post-item" data-tags={(post.data.tags ?? []).join(",")}>
            <div>
              <h3>
                <Link href={`/blog/${post.id}/`}>{post.data.title}</Link>
              </h3>
              <FormattedDate date={post.data.pubDate} />
            </div>
          </div>
        ))
      }
    </div>
  </section>
</Base>

<style>
  .tags-list {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 1rem;
    width: 100%;
  }
  .post-item {
    transition: opacity 0.3s ease;
  }

  .post-item.hidden {
    display: none;
  }

  .active {
    font-weight: bolder;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tagButtons = document.querySelectorAll(
      ".tag-button"
    ) as NodeListOf<HTMLButtonElement>;
    const postItems = document.querySelectorAll(
      ".post-item"
    ) as NodeListOf<HTMLElement>;

    tagButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        const target = event.currentTarget as HTMLButtonElement | null;
        const selectedTag = target?.getAttribute("data-tag") ?? "all";

        // Update active button
        tagButtons.forEach((btn) => btn.classList.remove("active"));
        if (target) {
          target.classList.add("active");
        }

        // Filter posts
        postItems.forEach((item) => {
          const postTags = item.getAttribute("data-tags") ?? "";
          if (selectedTag === "all" || postTags.includes(selectedTag)) {
            item.classList.remove("hidden");
          } else {
            item.classList.add("hidden");
          }
        });
      });
    });
  });
</script>
